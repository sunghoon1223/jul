import { chromium } from 'playwright';

async function debugConsoleErrors() {
  console.log('üîç ÏΩòÏÜî ÏóêÎü¨ ÎîîÎ≤ÑÍπÖ ÏãúÏûë...');
  
  const browser = await chromium.launch({ headless: false });
  const context = await browser.newContext();
  const page = await context.newPage();
  
  const errors = [];
  const logs = [];
  
  // ÏΩòÏÜî Î©îÏãúÏßÄ ÏàòÏßë
  page.on('console', msg => {
    const text = msg.text();
    if (msg.type() === 'error') {
      errors.push(text);
      console.log('‚ùå ERROR:', text);
    } else if (msg.type() === 'log') {
      logs.push(text);
      console.log('üìã LOG:', text);
    }
  });
  
  try {
    // 1. Î™®Îì† Ï†úÌíà ÌéòÏù¥ÏßÄ Î°úÎìú
    console.log('üì¶ Î™®Îì† Ï†úÌíà ÌéòÏù¥ÏßÄ Î°úÎìú...');
    await page.goto('http://localhost:8080/products');
    await page.waitForTimeout(5000); // Î°úÍ∑∏ ÏàòÏßëÏùÑ ÏúÑÌï¥ Ï∂©Î∂ÑÌûà ÎåÄÍ∏∞
    
    // 2. AGV Í≤ÄÏÉâ
    console.log('üîç AGV Í≤ÄÏÉâ...');
    const searchInput = await page.locator('input[type="search"], input[placeholder*="Í≤ÄÏÉâ"], input[placeholder*="search"]');
    if (await searchInput.count() > 0) {
      await searchInput.first().fill('AGV');
      await searchInput.first().press('Enter');
      await page.waitForTimeout(5000);
    }
    
    console.log('\\n=== ÏàòÏßëÎêú ÏóêÎü¨ ===');
    errors.forEach((error, index) => {
      console.log(`${index + 1}. ${error}`);
    });
    
    console.log('\\n=== ÏàòÏßëÎêú Î°úÍ∑∏ ===');
    logs.forEach((log, index) => {
      console.log(`${index + 1}. ${log}`);
    });
    
  } catch (error) {
    console.error('‚ùå ÎîîÎ≤ÑÍπÖ Ï§ë Ïò§Î•ò:', error);
  } finally {
    await browser.close();
  }
}

debugConsoleErrors().catch(console.error);